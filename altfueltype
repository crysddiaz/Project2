import streamlit as st
import requests
import pandas as pd
import numpy as np
import altair as alt

st.title("Alternative Fuel Finder")

#session state setup
if "current_step" not in st.session_state:
    st.session_state.current_step ="search"
if "stations" not in st.session_state:
    st.session_state.stations = None
    st.session_state.locations = None


def go_next():
    if st.session_state.current_step == "search":
        st.session_state.current_step = "results"
    elif st.session_state.current_step == "results":
        st.session_state.current_step = "send"

def go_back(to="search"):
    st.session_state.current_step = to

#navi control
if st.session_state.current_step == "results":
    if st.button("Back to Search"):
        go_back("search")
elif st.session_state.current_step == "send":
    col1, col2 = st.columns(2)
    with col1:
        if st.button("Back to Results"):
            go_back("results")
    with col2:
        if st.button("Back to Search"):
            go_back("search")

# user input location
if st.session_state.current_step == "search":
    location = st.text_input("Enter city, address or zip code")
    #find by fuel type
    fuel_type_options =["ELEC", "LPG","CNG","E85", "HY", "LNG", "BD", "RD"]
    selected_fuel_types = st.multiselect("Select one or more fuel type:",
                                         options=fuel_type_options,
                                         default=["ELEC"]
                                         )
    max_results = st.slider("Number of stations to retrieve", 10 ,100, step=10)

    #initialize session state for stations data
    if "stations" not in st.session_state:
        st.session_state.stations = None
        st.session_state.locations = None


    #button to call API
    if st.button("Search for Fuel"):
        if not location.strip():
            st.error("Please enter a city, address or zip code")
        elif not selected_fuel_types:
            st.error("Please select one or more fuel type")
        else:

            #extract user geo location lat/ long
            geo_url = "https://nominatim.openstreetmap.org/search"
            geo_params = {
                "q": location,
                "format": "json",
                "limit": 1
            }
            geo_response = requests.get(geo_url, params=geo_params, headers={"User-Agent": "Alternative Fuel Finder"})

            if geo_response.status_code == 200 and geo_response.json():
                geo_data = geo_response.json()[0]
                lat = float(geo_data["lat"])
                lon = float(geo_data["lon"])
                # st.write(f"Found Coordinates: Latitude: {lat}, Longitude: {lon}")

                # call NREL API with lat/lon
                api_key = "rsTWzqEBL7QktFeJtajUH91vbJBYkHhwTjAV1eLl"
                nrel_url = "https://developer.nrel.gov/api/alt-fuel-stations/v1/nearest.json"
                nrel_params = {
                    "api_key": api_key,
                    "latitude": lat,
                    "longitude": lon,
                    "limit": max_results,
                    "fuel_type": ",".join(selected_fuel_types)
            }

                nrel_response = requests.get(nrel_url, params=nrel_params)

                if nrel_response.status_code == 200:
                    stations = nrel_response.json().get("fuel_stations",[])
                    if stations:
                        st.session_state.stations = stations

                        #prep locations for map
                        locations = []

                        for station in stations:
                            lat = station.get("latitude")
                            lon = station.get("longitude")
                            if lat and lon:
                                locations.append({"lat": float(lat), "lon": float(lon)})
                        st.session_state.locations = locations
                        st.session_state.search_location = location.strip()

                        #move to next step
                        st.session_state.current_step = "results"

                    else:
                        st.warning("No fuel stations found near this location")
                        st.session_state.stations = None
                        st.session_state.locations = None
                else:
                    st.error("Please enter a city, address or zip code")
                    st.json(nrel_response.json())
                    st.session_state.stations = None
                    st.session_state.locations = None

            else:
                st.error("Please enter a city, address or zip code")
                st.session_state.stations = None
                st.session_state.locations = None

#Search Results
elif st.session_state.current_step == "results":

    if st.session_state.stations:
        st.subheader("Fuel Stations Found")

        #checkbox for map
        show_map = st.checkbox("Show Map View")
        if show_map:
            if st.session_state.locations:
                df_locations = pd.DataFrame(st.session_state.locations)
                st.map(df_locations)
            else:
                st.warning("No fuel stations available to display on map. ")
        else:
                #show table
            keys = ["station_name", "street_address", "city", "state", "zip",]
            stations_fixed = []
            for s in st.session_state.stations:
                fixed = {
                    "station_name": s.get("station_name",""),
                    "street_address": s.get("street_address",""),
                    "city": s.get("city",""),
                    "state": s.get("state",""),
                    "zip": s.get("zip",""),
                }
                stations_fixed.append(fixed)
            df_table = pd.DataFrame(stations_fixed)
            df_table.columns = keys

            st.subheader(f"Table of Locations")
            st.dataframe(df_table)
            st.write("---")

        st.subheader(f"Nearest Fuel Stations")
        for station in st.session_state.stations:
            st.markdown(f"**{station['station_name']}**")
            st.write(
                f"{station.get('street_address')}, {station.get('city')}, {station.get('state')}, {station.get('zip', 'N/A')}")
            st.write(f"Fuel Type: {station['fuel_type_code']}")
            st.write("---")

        st.success(f"Found {len(st.session_state.stations)} fuel stations near your {st.session_state.search_location}.")

        #bar chart for fuel type counts
        from collections import Counter

        fuel_type_names = {
            "ELEC": "Electric",
            "LPG": "Liquified Petroleum Gas",
            "CNG": "Compressed Natural Gas",
            "E85": "Ethanol (E85)",
            "HY": "Hydrogen",
            "LNG": "Liquified Natural Gas",
            "BD": "Biodiesel",
            "RD": "Renewable Diesel",
        }

        fuel_counts = {name: 0 for name in fuel_type_names.values()}
        for station in st.session_state.stations:
            ft_code = station.get("fuel_type_code")
            ft_name = fuel_type_names.get(ft_code, ft_code)
            fuel_counts[ft_name] = fuel_counts.get(ft_name, 0) + 1
        fuel_codes = [s.get("fuel_type_code") for s in st.session_state.stations]
        counts = Counter(fuel_codes)

        df_fuel_counts = pd.DataFrame({
            "Fuel Type": list(fuel_counts.keys()),
            "Fuel Count": list(fuel_counts.values())
    }).sort_values(by="Fuel Count", ascending=False)



        st.subheader(f"Fuel Types Distribution")
        chart = alt.Chart(df_fuel_counts).mark_bar().encode(
            x=alt.X('Fuel Type',sort='-y', title='Fuel Type'),
            y=alt.Y('Fuel Count', title='Number of Stations'),
            tooltip=['Fuel Type', 'Fuel Count'],
        ).properties(
            width= 600,
            height= 350
        )
        st.altair_chart(chart, use_container_width=True)

        #navigation buttons
        col1,col2 = st.columns(2)
        with col1:
            if st.button("Back to Search", key="back_to_search_results"):
                go_back("search")
        with col2:
            if st.button("Receive Search Results", key="receive_search_results"):
                go_next()
    else:
        st.warning("No search results available. Please go back and search again")
        if st.button("Back to Search"):
            go_back()

#receive search results
elif st.session_state.current_step == "send":
    st.subheader(f"Receive Your Search Results")

    delivery_method = st.selectbox("How would you like to receive your search results",["Email","Text Message"])

    contact_info = None
    if delivery_method == "Email":
        contact_info = st.text_input("Enter your email address")
    elif delivery_method == "Text Message":
        contact_info = st.text_input("Enter your phone number (with country code).")

    if st.button("Send Search Results"):
        if not contact_info:
            st.error(f"Please enter your {delivery_method.lower()}.")
        else:
            st.success(f"Search results will be sent to {delivery_method.lower()}.")
    if st.button("Back to Search", key= "back_to_search"):
        go_back()




